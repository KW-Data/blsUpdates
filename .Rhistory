###########################################################################################################
## CREATE DATAFRAMES AND FORMAT ##
###########################################################################################################
#### Labor Force Series ID's ###
JeffersonCountyLaborForce <- apiDataConverter("LAUCN211110000000006")
KentuckyLaborForce        <- apiDataConverter("LAUST210000000000006")
LouisvilleLaborForce      <- apiDataConverter("LAUMT213114000000006")
UnitedStatesLaborForce    <- apiDataConverter("LNU01000000")
### Unemployment Rate Series ID's ###
JeffersonCountyUnemployment <- apiDataConverter("LAUCN211110000000003")
KentuckyUnemployment        <- apiDataConverter("LAUST210000000000003")
LouisvilleUnemployment      <- apiDataConverter("LAUMT213114000000003")
UnitedStatesUnemployment    <- apiDataConverter("LNU04000000")
#Add area variable to data
### Labor Force ###
JeffersonCountyLaborForce$area   <- "Jefferson County"
KentuckyLaborForce$area          <- "Kentucky"
LouisvilleLaborForce$area        <- "Louisville MSA"
UnitedStatesLaborForce$area      <- "United States"
#UnitedStatesLaborForce$value    <- (UnitedStatesLaborForce$value)*1000
### Unemployment ###
JeffersonCountyUnemployment$area <- "Jefferson County"
KentuckyUnemployment$area        <- "Kentucky"
LouisvilleUnemployment$area      <- "Louisville MSA"
UnitedStatesUnemployment$area    <- "United States"
################### Combine dataframes
### Labor Force ###
laborForceData       <- rbind(JeffersonCountyLaborForce,
KentuckyLaborForce,
LouisvilleLaborForce)
### Unemployment ###
unemploymentRateData <- rbind(UnitedStatesUnemployment,
KentuckyUnemployment,
LouisvilleUnemployment,
JeffersonCountyUnemployment
)
################## Filter for specified month
### Labor Force ###
laborForceData       <- laborForceData %>% filter(periodName == blsMonth)
### Unemployment ###
unemploymentRateData <- unemploymentRateData %>% filter(periodName == blsMonth)
save(laborForceData,       file = "laborForce.Rda")
save(unemploymentRateData, file = "unemployment.Rda")
runApp()
month              <- "November"
dataRelease        <- "12/29/16"
totalPostings      <- 8796
baPostings         <- 2178
# STORE LAST MONTHS NUMBERS BELOW
lastMonthsPostings <- 10359
baLastMonth        <- 2150
totalJobPostings  <- format(totalPostings, big.mark = ',')
baPlusJobPostings <- format(baPostings,    big.mark = ',')
percentBachelors  <- percent(round((baPostings/totalPostings), digits = 4))
percentageBaPlus  <- percentBachelors
runApp()
# library(devtools)
# install_github("mikeasilva/blsAPI")
library(blsAPI)
library(RCurl)
library(RJSONIO)
library(ggplot2)
library(dplyr)
library(scales)
library(plotly)
####Load and clean data
#Start and End Years for BLS data and Month to Filter
startYear <- 2006
endYear   <- 2016
blsMonth  <- 'December'
apiKey    <- '2691a2506f514617823b4e653111fdc9'
#,'startyear'= startYear, 'endyear' = endYear
#Load data and parse it out with RJSONIO
#BLS series LNS14000000 returns the Seasonally Adjusted Unemployment Rate for individuals 16 and over.
###########################################################################################################
## FUNCTIONS ##
###########################################################################################################
#Convert Data from BLS API to DataFrame
apiDataConverter <- function(seriesId) {
payload     <- list('seriesid'        = seriesId,
'startyear'       = startYear,
'endyear'         = endYear,
'registrationKey' = apiKey)
bls.content <- blsAPI(payload)
bls.json    <- fromJSON(bls.content, simplify=TRUE)
tmp         <- bls.json$Results[[1]][[1]]
bls.df      <- data.frame(year=sapply(tmp$data,"[[","year"),
period=sapply(tmp$data,"[[","period"),
periodName=sapply(tmp$data,"[[","periodName"),
value=as.numeric(sapply(tmp$data,"[[","value")),
stringsAsFactors=FALSE)
}
###########################################################################################################
## CREATE DATAFRAMES AND FORMAT ##
###########################################################################################################
#### Labor Force Series ID's ###
JeffersonCountyLaborForce <- apiDataConverter("LAUCN211110000000006")
KentuckyLaborForce        <- apiDataConverter("LAUST210000000000006")
LouisvilleLaborForce      <- apiDataConverter("LAUMT213114000000006")
UnitedStatesLaborForce    <- apiDataConverter("LNU01000000")
### Unemployment Rate Series ID's ###
JeffersonCountyUnemployment <- apiDataConverter("LAUCN211110000000003")
KentuckyUnemployment        <- apiDataConverter("LAUST210000000000003")
LouisvilleUnemployment      <- apiDataConverter("LAUMT213114000000003")
UnitedStatesUnemployment    <- apiDataConverter("LNU04000000")
#Add area variable to data
### Labor Force ###
JeffersonCountyLaborForce$area   <- "Jefferson County"
KentuckyLaborForce$area          <- "Kentucky"
LouisvilleLaborForce$area        <- "Louisville MSA"
UnitedStatesLaborForce$area      <- "United States"
#UnitedStatesLaborForce$value    <- (UnitedStatesLaborForce$value)*1000
### Unemployment ###
JeffersonCountyUnemployment$area <- "Jefferson County"
KentuckyUnemployment$area        <- "Kentucky"
LouisvilleUnemployment$area      <- "Louisville MSA"
UnitedStatesUnemployment$area    <- "United States"
################### Combine dataframes
### Labor Force ###
laborForceData       <- rbind(JeffersonCountyLaborForce,
KentuckyLaborForce,
LouisvilleLaborForce)
### Unemployment ###
unemploymentRateData <- rbind(UnitedStatesUnemployment,
KentuckyUnemployment,
LouisvilleUnemployment,
JeffersonCountyUnemployment
)
################## Filter for specified month
### Labor Force ###
laborForceData       <- laborForceData %>% filter(periodName == blsMonth)
### Unemployment ###
unemploymentRateData <- unemploymentRateData %>% filter(periodName == blsMonth)
save(laborForceData,       file = "laborForce.Rda")
save(unemploymentRateData, file = "unemployment.Rda")
shiny::runApp()
month              <- "December"
dataRelease        <- "1/1/17"
totalPostings      <- 7446
baPostings         <- 1665
# STORE LAST MONTHS NUMBERS BELOW
lastMonthsPostings <- 8796
baLastMonth        <- 2178
totalJobPostings  <- format(totalPostings, big.mark = ',')
baPlusJobPostings <- format(baPostings,    big.mark = ',')
percentBachelors  <- percent(round((baPostings/totalPostings), digits = 4))
percentageBaPlus  <- percentBachelors
shiny::runApp()
shiny::runApp()
shiny::runApp()
# library(devtools)
# install_github("mikeasilva/blsAPI")
library(blsAPI)
library(RCurl)
library(RJSONIO)
library(ggplot2)
library(dplyr)
library(scales)
library(plotly)
####Load and clean data
#Start and End Years for BLS data and Month to Filter
startYear <- 2006
endYear   <- 2017
blsMonth  <- 'January'
apiKey    <- '2691a2506f514617823b4e653111fdc9'
#,'startyear'= startYear, 'endyear' = endYear
#Load data and parse it out with RJSONIO
#BLS series LNS14000000 returns the Seasonally Adjusted Unemployment Rate for individuals 16 and over.
###########################################################################################################
## FUNCTIONS ##
###########################################################################################################
#Convert Data from BLS API to DataFrame
apiDataConverter <- function(seriesId) {
payload     <- list('seriesid'        = seriesId,
'startyear'       = startYear,
'endyear'         = endYear,
'registrationKey' = apiKey)
bls.content <- blsAPI(payload)
bls.json    <- fromJSON(bls.content, simplify=TRUE)
tmp         <- bls.json$Results[[1]][[1]]
bls.df      <- data.frame(year=sapply(tmp$data,"[[","year"),
period=sapply(tmp$data,"[[","period"),
periodName=sapply(tmp$data,"[[","periodName"),
value=as.numeric(sapply(tmp$data,"[[","value")),
stringsAsFactors=FALSE)
}
###########################################################################################################
## CREATE DATAFRAMES AND FORMAT ##
###########################################################################################################
#### Labor Force Series ID's ###
JeffersonCountyLaborForce <- apiDataConverter("LAUCN211110000000006")
KentuckyLaborForce        <- apiDataConverter("LAUST210000000000006")
LouisvilleLaborForce      <- apiDataConverter("LAUMT213114000000006")
UnitedStatesLaborForce    <- apiDataConverter("LNU01000000")
### Unemployment Rate Series ID's ###
JeffersonCountyUnemployment <- apiDataConverter("LAUCN211110000000003")
KentuckyUnemployment        <- apiDataConverter("LAUST210000000000003")
LouisvilleUnemployment      <- apiDataConverter("LAUMT213114000000003")
UnitedStatesUnemployment    <- apiDataConverter("LNU04000000")
#Add area variable to data
### Labor Force ###
JeffersonCountyLaborForce$area   <- "Jefferson County"
KentuckyLaborForce$area          <- "Kentucky"
LouisvilleLaborForce$area        <- "Louisville MSA"
UnitedStatesLaborForce$area      <- "United States"
#UnitedStatesLaborForce$value    <- (UnitedStatesLaborForce$value)*1000
### Unemployment ###
JeffersonCountyUnemployment$area <- "Jefferson County"
KentuckyUnemployment$area        <- "Kentucky"
LouisvilleUnemployment$area      <- "Louisville MSA"
UnitedStatesUnemployment$area    <- "United States"
################### Combine dataframes
### Labor Force ###
laborForceData       <- rbind(JeffersonCountyLaborForce,
KentuckyLaborForce,
LouisvilleLaborForce)
### Unemployment ###
unemploymentRateData <- rbind(UnitedStatesUnemployment,
KentuckyUnemployment,
LouisvilleUnemployment,
JeffersonCountyUnemployment
)
################## Filter for specified month
### Labor Force ###
laborForceData       <- laborForceData %>% filter(periodName == blsMonth)
### Unemployment ###
unemploymentRateData <- unemploymentRateData %>% filter(periodName == blsMonth)
save(laborForceData,       file = "laborForce.Rda")
save(unemploymentRateData, file = "unemployment.Rda")
runApp()
# library(devtools)
# install_github("mikeasilva/blsAPI")
library(blsAPI)
library(RCurl)
library(RJSONIO)
library(ggplot2)
library(dplyr)
library(scales)
library(plotly)
####Load and clean data
#Start and End Years for BLS data and Month to Filter
startYear <- 2007
endYear   <- 2017
blsMonth  <- 'January'
apiKey    <- '2691a2506f514617823b4e653111fdc9'
#,'startyear'= startYear, 'endyear' = endYear
#Load data and parse it out with RJSONIO
#BLS series LNS14000000 returns the Seasonally Adjusted Unemployment Rate for individuals 16 and over.
###########################################################################################################
## FUNCTIONS ##
###########################################################################################################
#Convert Data from BLS API to DataFrame
apiDataConverter <- function(seriesId) {
payload     <- list('seriesid'        = seriesId,
'startyear'       = startYear,
'endyear'         = endYear,
'registrationKey' = apiKey)
bls.content <- blsAPI(payload)
bls.json    <- fromJSON(bls.content, simplify=TRUE)
tmp         <- bls.json$Results[[1]][[1]]
bls.df      <- data.frame(year=sapply(tmp$data,"[[","year"),
period=sapply(tmp$data,"[[","period"),
periodName=sapply(tmp$data,"[[","periodName"),
value=as.numeric(sapply(tmp$data,"[[","value")),
stringsAsFactors=FALSE)
}
###########################################################################################################
## CREATE DATAFRAMES AND FORMAT ##
###########################################################################################################
#### Labor Force Series ID's ###
JeffersonCountyLaborForce <- apiDataConverter("LAUCN211110000000006")
KentuckyLaborForce        <- apiDataConverter("LAUST210000000000006")
LouisvilleLaborForce      <- apiDataConverter("LAUMT213114000000006")
UnitedStatesLaborForce    <- apiDataConverter("LNU01000000")
### Unemployment Rate Series ID's ###
JeffersonCountyUnemployment <- apiDataConverter("LAUCN211110000000003")
KentuckyUnemployment        <- apiDataConverter("LAUST210000000000003")
LouisvilleUnemployment      <- apiDataConverter("LAUMT213114000000003")
UnitedStatesUnemployment    <- apiDataConverter("LNU04000000")
#Add area variable to data
### Labor Force ###
JeffersonCountyLaborForce$area   <- "Jefferson County"
KentuckyLaborForce$area          <- "Kentucky"
LouisvilleLaborForce$area        <- "Louisville MSA"
UnitedStatesLaborForce$area      <- "United States"
#UnitedStatesLaborForce$value    <- (UnitedStatesLaborForce$value)*1000
### Unemployment ###
JeffersonCountyUnemployment$area <- "Jefferson County"
KentuckyUnemployment$area        <- "Kentucky"
LouisvilleUnemployment$area      <- "Louisville MSA"
UnitedStatesUnemployment$area    <- "United States"
################### Combine dataframes
### Labor Force ###
laborForceData       <- rbind(JeffersonCountyLaborForce,
KentuckyLaborForce,
LouisvilleLaborForce)
### Unemployment ###
unemploymentRateData <- rbind(UnitedStatesUnemployment,
KentuckyUnemployment,
LouisvilleUnemployment,
JeffersonCountyUnemployment
)
################## Filter for specified month
### Labor Force ###
laborForceData       <- laborForceData %>% filter(periodName == blsMonth)
### Unemployment ###
unemploymentRateData <- unemploymentRateData %>% filter(periodName == blsMonth)
save(laborForceData,       file = "laborForce.Rda")
save(unemploymentRateData, file = "unemployment.Rda")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# library(devtools)
# install_github("mikeasilva/blsAPI")
library(blsAPI)
library(RCurl)
library(RJSONIO)
library(ggplot2)
library(dplyr)
library(scales)
library(plotly)
####Load and clean data
#Start and End Years for BLS data and Month to Filter
startYear <- 2007
endYear   <- 2017
blsMonth  <- 'February'
apiKey    <- '2691a2506f514617823b4e653111fdc9'
#,'startyear'= startYear, 'endyear' = endYear
#Load data and parse it out with RJSONIO
#BLS series LNS14000000 returns the Seasonally Adjusted Unemployment Rate for individuals 16 and over.
###########################################################################################################
## FUNCTIONS ##
###########################################################################################################
#Convert Data from BLS API to DataFrame
apiDataConverter <- function(seriesId) {
payload     <- list('seriesid'        = seriesId,
'startyear'       = startYear,
'endyear'         = endYear,
'registrationKey' = apiKey)
bls.content <- blsAPI(payload)
bls.json    <- fromJSON(bls.content, simplify=TRUE)
tmp         <- bls.json$Results[[1]][[1]]
bls.df      <- data.frame(year=sapply(tmp$data,"[[","year"),
period=sapply(tmp$data,"[[","period"),
periodName=sapply(tmp$data,"[[","periodName"),
value=as.numeric(sapply(tmp$data,"[[","value")),
stringsAsFactors=FALSE)
}
###########################################################################################################
## CREATE DATAFRAMES AND FORMAT ##
###########################################################################################################
#### Labor Force Series ID's ###
JeffersonCountyLaborForce <- apiDataConverter("LAUCN211110000000006")
KentuckyLaborForce        <- apiDataConverter("LAUST210000000000006")
LouisvilleLaborForce      <- apiDataConverter("LAUMT213114000000006")
UnitedStatesLaborForce    <- apiDataConverter("LNU01000000")
### Unemployment Rate Series ID's ###
JeffersonCountyUnemployment <- apiDataConverter("LAUCN211110000000003")
KentuckyUnemployment        <- apiDataConverter("LAUST210000000000003")
LouisvilleUnemployment      <- apiDataConverter("LAUMT213114000000003")
UnitedStatesUnemployment    <- apiDataConverter("LNU04000000")
#Add area variable to data
### Labor Force ###
JeffersonCountyLaborForce$area   <- "Jefferson County"
KentuckyLaborForce$area          <- "Kentucky"
LouisvilleLaborForce$area        <- "Louisville MSA"
UnitedStatesLaborForce$area      <- "United States"
#UnitedStatesLaborForce$value    <- (UnitedStatesLaborForce$value)*1000
### Unemployment ###
JeffersonCountyUnemployment$area <- "Jefferson County"
KentuckyUnemployment$area        <- "Kentucky"
LouisvilleUnemployment$area      <- "Louisville MSA"
UnitedStatesUnemployment$area    <- "United States"
################### Combine dataframes
### Labor Force ###
laborForceData       <- rbind(JeffersonCountyLaborForce,
KentuckyLaborForce,
LouisvilleLaborForce)
### Unemployment ###
unemploymentRateData <- rbind(UnitedStatesUnemployment,
KentuckyUnemployment,
LouisvilleUnemployment,
JeffersonCountyUnemployment
)
################## Filter for specified month
### Labor Force ###
laborForceData       <- laborForceData %>% filter(periodName == blsMonth)
### Unemployment ###
unemploymentRateData <- unemploymentRateData %>% filter(periodName == blsMonth)
save(laborForceData,       file = "laborForce.Rda")
save(unemploymentRateData, file = "unemployment.Rda")
shiny::runApp()
runApp()
runApp()
runApp()
totalPostings      <- 8595
asPostings         <- 2299
baPostings         <- 1908
as <- baPostings - asPostings
as <- asPostings - baPostings
as.data.frame(totalPostings, as, baPostings)
cbind(totalPostings, as, baPostings)
test <- as.data.frame(cbind(totalPostings, as, baPostings))
other <- totalPostings - asPostings
test <- as.data.frame(cbind(other, as, baPostings))
View(test)
treemap(test, other, as, baPostings)
library(treemap)
treemap(test, other, as, baPostings)
test <- as.data.frame(rbind(other, as, baPostings))
View(test)
names(test) <- "test"
View(test)
names(test) <- c("test", "testing")
names(dimnames(test)) <- "working?"
View(test)
View(test)
View(test)
View(test)
View(test)
names(dimnames(test)) <- "working?"
View(test)
dimnames(test) <- setNames(dimnames(test),c("lower case", "upper case"))
View(test)
dimnames(test) <- setNames(dimnames(test),c("lower case", "upper case"))
View(test)
treemap(test, "", "test", title = youth16to19Title)
treemap(test, 0, "test", title = youth16to19Title)
totalPostings      <- 8595
asPostings         <- 2299
baPostings         <- 1908
as <- asPostings - baPostings
other <- totalPostings - asPostings
other$label <- "Other"
as$label <- "Associate's or higher"
baPostings <- "Bachelor's or higher"
as <- as.data.frame(asPostings - baPostings)
as <- as.data.frame(as)
as$label <- "Associate's or higher"
other <- as.data.frame(other)
totalPostings      <- 8595
asPostings         <- 2299
baPostings         <- 1908
as <- asPostings - baPostings
ba <- baPostings
other <- totalPostings - asPostings
as    <- as.data.frame(as)
ba    <- as.data.frame(ba)
other <- as.data.frame(other)
other$label <- "Other"
as$label    <- "Associate's or higher"
ba$label    <- "Bachelor's or higher"
test <- as.data.frame(rbind(other, as, ba))
test <- rbind(other, as, ba))
test <- rbind(other, as, ba)
View(other)
totalPostings      <- 8595
asPostings         <- 2299
baPostings         <- 1908
as <- asPostings - baPostings
ba <- baPostings
other <- totalPostings - asPostings
as    <- as.data.frame(as)
ba    <- as.data.frame(ba)
other <- as.data.frame(other)
as$label    <- "Associate's or higher"
ba$label    <- "Bachelor's or higher"
other$label <- "Other"
colnames(as)[1] <- "postings"
colnames(ba)[1] <- "postings"
colnames(other)[1] <- "postings"
test <- rbind(other, as, ba)
View(test)
eduPostings <- rbind(other, as, ba)
treemap(eduPostings, "label",  "postings", title = "Test One")
library(scales)
as$label    <- paste("Associate's or higher", percent(as/totalPostings))
as/total
as    <- as.data.frame(as)
as$postings/totalPostings
as$label    <- paste("Associate's or higher", percent(as$postings/totalPostings))
eduPostings <- rbind(other, as, ba)
treemap(eduPostings, "label",  "postings", title = "Test One")
other$label <- paste("Other", percent(other$postings/totalPostings))
totalPostings      <- 8595
asPostings         <- 2299
baPostings         <- 1908
as <- asPostings - baPostings
ba <- baPostings
other <- totalPostings - asPostings
as    <- as.data.frame(as)
ba    <- as.data.frame(ba)
other <- as.data.frame(other)
colnames(as)[1] <- "postings"
colnames(ba)[1] <- "postings"
colnames(other)[1] <- "postings"
as$label    <- paste("Associate's degree job postings", percent(as$postings/totalPostings))
ba$label    <- paste("Bachelor's or higher job postings", percent(ba$postings/totalPostings))
other$label <- paste("Other", percent(other$postings/totalPostings))
eduPostings <- rbind(other, as, ba)
treemap(eduPostings, "label",  "postings", title = "")
other$label <- paste("All other job postings",\n,  percent(other$postings/totalPostings))
other$label <- paste("All other job postings","\n",  percent(other$postings/totalPostings))
as$label    <- paste("Associate's degree job postings", "\n", percent(as$postings/totalPostings))
ba$label    <- paste("Bachelor's or higher job postings", "\n", percent(ba$postings/totalPostings))
other$label <- paste("All other job postings", "\n",  percent(other$postings/totalPostings))
eduPostings <- rbind(other, as, ba)
treemap(eduPostings, "label",  "postings", title = "")
runApp()
