{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(blsAPI)\nlibrary(RCurl)\nlibrary(RJSONIO)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(plotly)\n\n####Load and clean data\n#Start and End Years for BLS data and Month to Filter\nstartYear <- 2006\nendYear   <- 2016\nblsMonth  <- 'August'\napiKey    <- '2691a2506f514617823b4e653111fdc9'\n#,'startyear'= startYear, 'endyear' = endYear\n#Load data and parse it out with RJSONIO\n#BLS series LNS14000000 returns the Seasonally Adjusted Unemployment Rate for individuals 16 and over.\n\n###########################################################################################################\n## FUNCTIONS ##\n###########################################################################################################\n#Convert Data from BLS API to DataFrame\napiDataConverter <- function(seriesId) {\n       payload     <- list('seriesid'        = seriesId,\n                           'startyear'       = startYear, \n                           'endyear'         = endYear, \n                           'registrationKey' = apiKey)\n       bls.content <- blsAPI(payload)\n       bls.json    <- fromJSON(bls.content, simplify=TRUE)\n       tmp         <- bls.json$Results[[1]][[1]]\n       bls.df      <- data.frame(year=sapply(tmp$data,\"[[\",\"year\"),\n                                 period=sapply(tmp$data,\"[[\",\"period\"),\n                                 periodName=sapply(tmp$data,\"[[\",\"periodName\"),\n                                 value=as.numeric(sapply(tmp$data,\"[[\",\"value\")),\n                                 stringsAsFactors=FALSE)\n}\n\n###########################################################################################################\n## CREATE DATAFRAMES AND FORMAT ##\n###########################################################################################################\n\n#### Labor Force Series ID's ###\nJeffersonCountyLaborForce <- apiDataConverter(\"LAUCN211110000000006\")\nKentuckyLaborForce        <- apiDataConverter(\"LAUST210000000000006\")\nLouisvilleLaborForce      <- apiDataConverter(\"LAUMT213114000000006\")\nUnitedStatesLaborForce    <- apiDataConverter(\"LNU01000000\")\n\n### Unemployment Rate Series ID's ###\nJeffersonCountyUnemployment <- apiDataConverter(\"LAUCN211110000000003\")\nKentuckyUnemployment        <- apiDataConverter(\"LAUST210000000000003\")\nLouisvilleUnemployment      <- apiDataConverter(\"LAUMT213114000000003\")\nUnitedStatesUnemployment    <- apiDataConverter(\"LNU04000000\")\n\n\n#Add area variable to data\n### Labor Force ###\nJeffersonCountyLaborForce$area   <- \"Jefferson County\"\nKentuckyLaborForce$area          <- \"Kentucky\"\nLouisvilleLaborForce$area        <- \"Louisville MSA\"\nUnitedStatesLaborForce$area      <- \"United States\"\n#UnitedStatesLaborForce$value    <- (UnitedStatesLaborForce$value)*1000\n\n### Unemployment ###\nJeffersonCountyUnemployment$area <- \"Jefferson County\"\nKentuckyUnemployment$area        <- \"Kentucky\"\nLouisvilleUnemployment$area      <- \"Louisville MSA\"\nUnitedStatesUnemployment$area    <- \"United States\"\n\n\n################### Combine dataframes\n### Labor Force ###\nlaborForceData       <- rbind(JeffersonCountyLaborForce, \n                              KentuckyLaborForce, \n                              LouisvilleLaborForce)\n\n### Unemployment ###\nunemploymentRateData <- rbind(UnitedStatesUnemployment,\n                              KentuckyUnemployment, \n                              LouisvilleUnemployment, \n                              JeffersonCountyUnemployment\n                              )\n\n################## Filter for specified month\n### Labor Force ###\nlaborForceData       <- laborForceData%>%\n       filter(periodName == blsMonth)\n\n### Unemployment ###\nunemploymentRateData <- unemploymentRateData%>%\n       filter(periodName == blsMonth)\n\n\n###################### Convert values to numeric \n### Labor Force ###\nlaborForceData$value         <- as.numeric(as.character(laborForceData$value))\nUnitedStatesLaborForce$value <- as.numeric(as.character(UnitedStatesLaborForce$value))\n\n### Unemployment ###\nunemploymentRateData$value   <- as.numeric(as.character(unemploymentRateData$value))\n\nlastYearUnemployment <- unemploymentRateData %>%\n                            filter(year == 2015 | year == 2016) %>%\n                            select(area, value, year)\n\n\nthisYearUnemployment <- unemploymentRateData %>%\n                            filter(year == 2016)\n\nfont     <- list(\n       family = \"Helvetica, sans-serif\",\n       size = 20,\n       color = \"#1f1f2e\")\n\naxisFont <- list(\n       size = 18)\n\nxAxis    <- list(\n       title = \"Year\",\n       titlefont = axisFont)\n\n\nyAxisLaborForce       <- list(\n                            title = \"Labor Force\",\n                            titlefont = axisFont)\n\nyaxisUnemploymentRate <- list(\n                            title = \"Unemployment Rate\",\n                            titlefont = axisFont)\n       \n\nmargin = list(\n              l = 80,\n              r = 50,\n              b = 100,\n              t = 50,\n              pad = 1)\n\n################################################### SHINY SERVER\n\nshinyServer(function(input, output) {\n       \n  output$unemploymentLastYear <- renderDataTable({\n         lastYearUnemployment\n\n  })\n  output$unemploymentThisYear <- renderPrint({\n         print(thisYearUnemployment)\n  })\n\n           \n  output$laborForcePlot <- renderPlotly({\n         \n         plot_ly(laborForceData, x = year, y = value, color = area) %>%\n                layout(\n                       autosize = F, \n                       width  = 700, \n                       height = 500, \n                       margin = margin, \n                       xaxis  = xAxis, \n                       yaxis  = yAxisLaborForce,\n                       font   = font, \n                       legend = list(\n                              x = .6, \n                              y = .6))\n  })\n  \n  \n  output$unemploymentRatePlot <-  renderPlotly({\n         \n         plot_ly(unemploymentRateData, x = year, y = value, color = area) %>%\n                layout(\n                       autosize = F, \n                       width  = 700, \n                       height = 500, \n                       margin = margin, \n                       xaxis  = xAxis, \n                       yaxis  = yaxisUnemploymentRate,\n                       font   = font, \n                       legend = list(\n                              x = .7, \n                              y = .95))\n\n  })\n\n})\n",
    "created" : 1475170297498.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4185335328",
    "id" : "4A6F166",
    "lastKnownWriteTime" : 1475170316,
    "path" : "C:/Users/rdevore/Desktop/rProjects/rstudioWork/shinyBlsUpdates/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}